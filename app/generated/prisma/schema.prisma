generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  BANK_TRANSFER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]
  addresses Address[]
  wishlist  Wishlist?
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  stock       Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      String[] // Firebase storage URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews       Review[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Order {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal
  paymentStatus PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderItems OrderItem[]
  payment    Payment?
  shipping   ShippingAddress?
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(UNPAID)
  transactionId String?
  createdAt     DateTime      @default(now())
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Address {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  fullName String
  street   String
  city     String
  state    String
  zipCode  String
  country  String
  phone    String
}

model ShippingAddress {
  id       String @id @default(cuid())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String @unique
  fullName String
  street   String
  city     String
  state    String
  zipCode  String
  country  String
  phone    String
}

model Wishlist {
  id     String         @id @default(cuid())
  user   User           @relation(fields: [userId], references: [id])
  userId String         @unique
  items  WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}
